GUI = nil

class "PBAUI" (CUIScriptWnd)
function PBAUI:__init() super()
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("ui_pba_indicators.xml")
	local xml = self.xml
	
	self.pos_x = ui_mcm.get("perk_based_artefacts/pos_x")
	self.pos_y = ui_mcm.get("perk_based_artefacts/pos_y")
	self.indicator_width = 50
	self.indicator_height = 100
	self.indicator_margin = ui_mcm.get("perk_based_artefacts/indicator_margin")
	self.display_text = ui_mcm.get("perk_based_artefacts/display_text")
	self.text_margin = ui_mcm.get("perk_based_artefacts/text_margin")
	self.scaling = ui_mcm.get("perk_based_artefacts/scaling")
	self.alignment = ui_mcm.get("perk_based_artefacts/alignment")
	self.text_alignment = ui_mcm.get("perk_based_artefacts/text_alignment")
	self.icon_size = ui_mcm.get("perk_based_artefacts/icon_size")
	self.icon_layer_size = 18
	self.icon_layer_margin = 1
	self.font_list = {
		GetFontSmall(),
		GetFontMedium(),
		GetFontDI(),
		GetFontLetterica16Russian(),
		GetFontLetterica18Russian(),
		GetFontLetterica25(),
		GetFontGraffiti19Russian(),
		GetFontGraffiti22Russian(),
		GetFontGraffiti32Russian(),
		GetFontGraffiti50Russian(),
	}
	self.font_num = ui_mcm.get("perk_based_artefacts/text_font")
	self.font = self.font_list[self.font_num]

	self.indicators = {}
	self.test_indicators = {}
	self.test_elements = 5

	self.dialog = xml:InitStatic("indicators", self)
	self.dialog:Show(false)
	self.dialog:SetWndPos(vector2():set(self.pos_x, self.pos_y))
	self.dialog:SetWndSize(vector2():set(0, 0))

	self.tg = 0
	self.tg_period = 100
	self.test_mode = false

	self:Reinit()
	self:PopulateTestIndicators()

	RegisterScriptCallback("actor_on_net_destroy", self)
end

function PBAUI:SetFont(param, val)
	self.font_num = val
	self.font = self.font_list[self.font_num]
	self:UpdateLayout()
end

function PBAUI:SetParam(param, val)
	self[param] = val
	self:UpdateLayout()
end

function PBAUI:Reinit()
	get_hud():AddDialogToRender(self)
end

function PBAUI:Destroy()
	get_hud():RemoveDialogToRender(self)
end

function PBAUI:actor_on_net_destroy()
    self:Destroy()
end

function PBAUI:__finalize()

end

function PBAUI:GetUIParam(param)
	return self[param] * self.scaling
end

function PBAUI:SafeAttach(v)
	if v.wnd and v.wnd.container and not v.wnd.container_attached then
		self.dialog:AttachChild(v.wnd.container)
		v.wnd.container_attached = true
	end
end

function PBAUI:SafeDetach(v)
	if v.wnd and v.wnd.container and v.wnd.container_attached then
		self.dialog:DetachChild(v.wnd.container)
		v.wnd.container_attached = false
	end
end

function PBAUI:UpdateLayout()
	local width = 0
	local xml = self.xml
	local indicators = self.test_mode and self.test_indicators or self.indicators

	for k, v in spairs(indicators) do
		self:SafeDetach(v)

		local wnd_container = xml:InitStatic("indicators:static", self.dialog)
		wnd_container:SetWndPos(vector2():set(width, 0))
		wnd_container:SetWndSize(vector2():set(self:GetUIParam("indicator_width"), self:GetUIParam("indicator_height")))

		local icon_width = self:GetUIParam("indicator_width") * self.icon_size
		local icon_height = self:GetUIParam("indicator_height") / 2 * (4/3) * self.icon_size
		local icon_pos_x = (self:GetUIParam("indicator_width") - icon_width) / 2
		local icon_pos_y =  (self:GetUIParam("indicator_height") / 2 * (4/3) - icon_height)

		local wnd_icon_shadow = xml:InitStatic("indicators:static", wnd_container)
		wnd_icon_shadow:InitTexture(utils_xml.get_icons_texture(v.section))
        wnd_icon_shadow:SetTextureRect(Frect():set(utils_xml.get_item_axis(v.section, nil, true)))
        wnd_icon_shadow:SetStretchTexture(true)
        wnd_icon_shadow:SetTextureColor(GetARGB(255, 20, 20, 20))
        wnd_icon_shadow:SetWndPos(vector2():set(icon_pos_x + 2, icon_pos_y + 2))
		wnd_icon_shadow:SetWndSize(vector2():set(icon_width, icon_height))

		local wnd_icon = xml:InitStatic("indicators:static", wnd_container)
		wnd_icon:InitTexture(utils_xml.get_icons_texture(v.section))
        wnd_icon:SetTextureRect(Frect():set(utils_xml.get_item_axis(v.section, nil, true)))
        wnd_icon:SetStretchTexture(true)
        wnd_icon:SetWndPos(vector2():set(icon_pos_x, icon_pos_y))
		wnd_icon:SetWndSize(vector2():set(icon_width, icon_height))

		-- Icon layers have right bottom alignment
		if is_not_empty(v.icon_layers) then
			local icon_layer_hor = 1
			local icon_layer_vert = 1
			local icon_layer_hor_max = math.ceil(self.indicator_width / (self.icon_layer_margin + self.icon_layer_size))
			local icon_layers = {}
			for i, v1 in ipairs(v.icon_layers) do
				if is_not_empty(v1) then
					local icon_layer_size = self:GetUIParam("icon_layer_size") * self.icon_size
					local icon_layer_margin = self:GetUIParam("icon_layer_margin") * self.icon_size
					local icon_layer_width = icon_layer_size
					local icon_layer_height = icon_layer_size * (4/3)
					local icon_layer_pos_x = icon_pos_x + icon_width - (icon_layer_hor * (icon_layer_margin + icon_layer_width)) 
					local icon_layer_pos_y = icon_pos_y + icon_height - (icon_layer_vert * (icon_layer_margin + icon_layer_height))

					icon_layer_hor = icon_layer_hor + 1
					if icon_layer_hor >= icon_layer_hor_max then
						icon_layer_vert = icon_layer_vert + 1
						icon_layer_hor = 1
					end

					local wnd_icon_shadow = xml:InitStatic("indicators:static", wnd_container)
					wnd_icon_shadow:InitTexture(v1.section and utils_xml.get_icons_texture(v1.section) or v1.icon)
					if v1.section then
			        	wnd_icon_shadow:SetTextureRect(Frect():set(utils_xml.get_item_axis(v1.section, nil, true)))
			        end
			        wnd_icon_shadow:SetStretchTexture(true)
			        wnd_icon_shadow:SetTextureColor(GetARGB(255, 20, 20, 20))
			        wnd_icon_shadow:SetWndPos(vector2():set(icon_layer_pos_x + 1, icon_layer_pos_y + 1))
					wnd_icon_shadow:SetWndSize(vector2():set(icon_layer_width, icon_layer_height))

					local wnd_icon = xml:InitStatic("indicators:static", wnd_container)
					wnd_icon:InitTexture(v1.section and utils_xml.get_icons_texture(v1.section) or v1.icon)
					if v1.section then
			        	wnd_icon:SetTextureRect(Frect():set(utils_xml.get_item_axis(v1.section, nil, true)))
			        end
			        wnd_icon:SetStretchTexture(true)
			        wnd_icon:SetWndPos(vector2():set(icon_layer_pos_x, icon_layer_pos_y))
					wnd_icon:SetWndSize(vector2():set(icon_layer_width, icon_layer_height))
					icon_layers[#icon_layers + 1] = {
						wnd_icon = wnd_icon,
						wnd_icon_shadow = wnd_icon_shadow,
					}
				end
			end
		end

		local text_width = self:GetUIParam("indicator_width")
		local text_height = self:GetUIParam("indicator_height") / 2 - self.text_margin
		local text_pos_x = 0
		local text_pos_y = self:GetUIParam("indicator_height") / 2 + self.text_margin

		local wnd_text_shadow = xml:InitTextWnd("indicators_text", wnd_container)
		wnd_text_shadow:SetWndPos(vector2():set(text_pos_x, text_pos_y))
		wnd_text_shadow:SetWndSize(vector2():set(text_width, text_height))
		wnd_text_shadow:SetText(v.validate_func() and v.text_func() or "")
		wnd_text_shadow:SetWndPos(vector2():set(wnd_text_shadow:GetWndPos().x + 1, wnd_text_shadow:GetWndPos().y + 1))
		wnd_text_shadow:SetTextColor(GetARGB(255, 20, 20, 20))
		wnd_text_shadow:SetFont(self.font)
		wnd_text_shadow:SetTextAlignment(self.text_alignment)

		local wnd_text = xml:InitTextWnd("indicators_text", wnd_container)
		wnd_text:SetWndPos(vector2():set(text_pos_x, text_pos_y))
		wnd_text:SetWndSize(vector2():set(text_width, text_height))
		wnd_text:SetText(v.validate_func() and v.text_func() or "")
		wnd_text:SetFont(self.font)
		wnd_text:SetTextAlignment(self.text_alignment)

		if self.display_text == 0 then
			wnd_text_shadow:Show(false)
			wnd_text:Show(false)
		end

		width = width + self:GetUIParam("indicator_width") + self:GetUIParam("indicator_margin")

		indicators[k].wnd.container = wnd_container
		indicators[k].wnd.icon = wnd_icon
		indicators[k].wnd.icon_shadow = wnd_icon_shadow
		indicators[k].wnd.text = wnd_text
		indicators[k].wnd.text_shadow = wnd_text_shadow
		indicators[k].wnd.icon_layers = icon_layers
		indicators[k].wnd.container_attached = true
	end

	width = width - self:GetUIParam("indicator_width") - self:GetUIParam("indicator_margin")

	if self.alignment == 0 then
		self.dialog:SetWndPos(vector2():set(self.pos_x, self.pos_y))
	elseif self.alignment == 2 then
		local offset = width
		self.dialog:SetWndPos(vector2():set(self.pos_x - offset, self.pos_y))
	elseif self.alignment == 1 then
		local offset = width / 2
		self.dialog:SetWndPos(vector2():set(self.pos_x - offset, self.pos_y))
	end
	self.dialog:SetWndSize(vector2():set(width, self:GetUIParam("indicator_height")))
end

AddScriptCallback("pbaui_on_indicator_add")
AddScriptCallback("pbaui_on_indicator_remove")
AddScriptCallback("pbaui_on_indicator_ui_init")

-- Key - unique key for indicator
-- Section - section for artefact
-- text_func - Function for displaying text
-- validate_func - Function for checking, should the indicator display or not.
-- icon_layers - table of icons that will be layered on top of section, each table entry is a table that can contain either section or icon field
-- Return false will remove the indicator 
function PBAUI:AddIndicator(key, override, section, text_func, validate_func, icon_layers)
	if self.indicators[key] then
		if not override then return end
		self:SafeDetach(self.indicators[key])
	end

	self.indicators[key] = {
		section = section,
		text_func = text_func,
		validate_func = validate_func,
		icon_layers = icon_layers or {},
		wnd = {}
	}

	if not self.test_mode then
		SendScriptCallback("pbaui_on_indicator_add", key, self.indicators[key])
	end
	self:UpdateLayout()
end

function PBAUI:PopulateTestIndicators()
	local artes = {
		"af_dragon_eye",
		"af_fire_loop",
		"af_ball",
		"af_fonar",
		"af_tapeworm",
		"af_moh",
		"af_serofim",
		"af_elektron",
		"af_kogot",
		"af_generator",
		"af_black_angel",
		"af_grapes",
		"af_skull_miser",
		"af_star_phantom",
		"af_medallion",
		"af_peas",
		"af_kislushka",
		"af_zhelch",
		"af_sandstone",
		"af_fountain",
		"af_spaika",
		"af_signet",
		"af_repei",
		"af_bat",
		"af_sun",
		"af_ear",
		"af_chelust",
		"af_atom",
		"af_lighthouse",
		"af_cell",
		"af_cocoon",
	}
	for k, v in pairs(self.test_indicators) do
		self:SafeDetach(v)
		self.test_indicators[k] = nil
	end
	for key = 1, self.test_elements do
		if self.test_indicators[key] then
			self:SafeDetach(self.test_indicators[key])
		end
		self.test_indicators[key] = {
			section = artes[math.random(#artes)],
			text_func = function() return "C:1200\\nE:100" end,
			validate_func = function() return true end,
			icon_layers = (function()
				local t = {}
				for i = 1, math.random(4) do
					t[#t + 1] = {
						section = artes[math.random(#artes)]
					}
				end
				return t
			end)()
			,
			wnd = {}
		}
	end
end

function PBAUI:RemoveIndicator(key)
	if self.indicators[key] then
		self:SafeDetach(self.indicators[key])
		self.indicators[key] = nil
		if not self.test_mode then
			SendScriptCallback("pbaui_on_indicator_remove", key)
		end
		self:UpdateLayout()
	end
end

function PBAUI:Hide()
	self.dialog:Show(false)
end

function PBAUI:Show()
	self.dialog:Show(true)
end

function PBAUI:SwitchTestMode(v)
	self.test_mode = v
	if self.test_mode then
		for k, v in pairs(self.indicators) do
			self:SafeDetach(v)
			self:PopulateTestIndicators()
		end
	else
		for k, v in pairs(self.test_indicators) do
			self:SafeDetach(v)
		end
	end
	self:UpdateLayout()
end

function PBAUI:Update(force)
	CUIScriptWnd.Update(self)
	
	local tg = time_global()
	if tg < self.tg then return end
	self.tg = tg + self.tg_period

	self:Hide()

	if not self.test_mode then
		if not (ui_mcm.get("perk_based_artefacts/ui_enabled")) then
			return
		end
	end

	local update_pending = self.test_mode
	local indicators = self.test_mode and self.test_indicators or self.indicators
	for k, v in pairs(indicators) do
		if not v.validate_func() then
			update_pending = true
			self:SafeDetach(v)
			indicators[k] = nil
			if not self.test_mode then
				SendScriptCallback("pbaui_on_indicator_remove", k)
			end
		else
			if self.display_text == 1 then
				v.wnd.text:SetText(v.text_func() or "")
				v.wnd.text_shadow:SetText(v.text_func() or "")
			end
		end
	end

	if update_pending then
		self:UpdateLayout()
	end

	self:Show()
end

function on_option_change()
	GUI:UpdateLayout()
	if ui_mcm.get("perk_based_artefacts/ui_enabled") then
		GUI:Show()
	else
		GUI:Hide()
	end
end

function start()
	GUI = PBAUI()
	on_option_change()
	SendScriptCallback("pbaui_on_indicator_ui_init", GUI)
	RegisterScriptCallback("on_option_change", on_option_change)
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", start)
end

-- Debug
function addRandomIndicator()
	local artes = {
		"af_dragon_eye",
		"af_fire_loop",
		"af_ball",
		"af_fonar",
		"af_tapeworm",
		"af_moh",
		"af_serofim",
		"af_elektron",
		"af_kogot",
		"af_generator",
		"af_black_angel",
		"af_grapes",
		"af_skull_miser",
		"af_star_phantom",
		"af_medallion",
		"af_peas",
		"af_kislushka",
		"af_zhelch",
		"af_sandstone",
		"af_fountain",
		"af_spaika",
		"af_signet",
		"af_repei",
		"af_bat",
		"af_sun",
		"af_ear",
		"af_chelust",
		"af_atom",
		"af_lighthouse",
		"af_cell",
		"af_cocoon",
	}
	local texts = {
		("C:%s \\n"):format(math.random(100)),
		("E:%s \\nC:%s"):format(math.random(100), math.random(100)),
		("S:%s \\nE:%s \\nC:%s"):format(math.random(10), math.random(100), math.random(100))
	}
	local display_time = math.random(5, 15)
	local a = artes[math.random(#artes)]
	local t = texts[math.random(#texts)]
	local tg = time_global()
	GUI:AddIndicator(a, false, a,
		function() return round_idp(display_time - (time_global() - tg) * 0.001, 2) end,
		function() return time_global() - tg < display_time * 1000 end
	)
end
