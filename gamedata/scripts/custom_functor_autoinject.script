-- Custom Dynamic Functors
local function func_index(t,a,b)
	return (t[a].index) < (t[b].index)
end

local function func_index_reverse(t,a,b)
	return (t[a].index) > (t[b].index)
end

local spairs = spairs
local string_find = string.find
local string_gsub = string.gsub
local tonumber = tonumber

ui_inventory.UIInventory.get_max_custom_functor = function(self)
	local max = 0
	local max_custom = {}
	local max_index = 0
	for k, v in pairs(self.properties) do
	    if string_find(k, "custom_.*") then
	    	if v.index > max_index then
				max_index = v.index
			end
	        x = tonumber(string_gsub(k, "custom_(.*)", "%1"), nil)
	        if x > max then
	            max = x
	            max_custom = v
	        end
	    end
	end
	return max, max_custom, max_index
end

ui_inventory.UIInventory.add_custom_functor = function(self)
	local max, max_custom, max_index = self:get_max_custom_functor()
	local custom_num = max + 1
	for k, v in spairs(self.properties, func_index_reverse) do
        if v.index > max_index then
        	-- printf("%s, %s", k, v.index)
            v.index = v.index + 1
        else
        	-- printf("%s, %s, max custom_functor reached", k, v.index)
        	break
        end
    end
	self.properties["custom_" .. custom_num] = {
	    index = max_index + 1,
	    name_func = {"Name_Custom", max_custom["name_func"][2] + 1},
	    mode_func = {"Mode_Custom", max_custom["mode_func"][2] + 1},
	    cont_func = {"Cont_Custom", max_custom["cont_func"][2] + 1},
	    precondition1 = {"Name_Custom", max_custom["precondition1"][2] + 1},
	    action = {"Action_Custom", max_custom["action"][2] + 1}
	}
	return custom_num
end

function add_functor(name, cond_name, func_name, cond_action, func_action)
	if not name then return end

	if not ui_inventory.GUI then
		ui_inventory.GUI = ui_inventory.UIInventory()
	end

	ui_inventory.GUI[name] = ui_inventory.GUI:add_custom_functor()

	local NameCustom = ui_inventory.GUI.Name_Custom
	function ui_inventory.GUI:Name_Custom(obj, bag, temp, i)
	    obj = self:CheckItem(obj,"Name_Custom " .. i)
	    if i == self[name] and cond_name(obj) then
	        return func_name(obj)
	    else
	        return NameCustom(self, obj, bag, temp, i)
	    end
	end

	local ActionCustom = ui_inventory.GUI.Action_Custom
	function ui_inventory.GUI:Action_Custom(obj, bag, temp, i)
	    obj = self:CheckItem(obj,"Action_Custom " .. i)
	    if i == self[name] and cond_action(obj) then
	        return func_action(obj)
	    else
	        return ActionCustom(self, obj, bag, temp, i)
	    end
	end

end
