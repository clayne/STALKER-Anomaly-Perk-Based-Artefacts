-- Wrapper for AddUniqueCall that checks for time_global update before executing function
local function throttle(func, tg_throttle)
	local tg = 0
	if not tg_throttle or tg_throttle == 0 then
		return function(...)
			local t = time_global()
			if t ~= tg then
				tg = t
				return func(...)
			end
		end
	elseif type(tg_throttle) == "function" then
		return function(...)
			-- If true - fire immediately
			if tg_throttle(tg) == true then
				return func(...)
			end

			-- If false/nil - don't fire
			if not tg_throttle(tg) then
				return
			end

			-- If number - throttle by that number
			local t = time_global()
			if t < tg then return end
			tg = t + tg_throttle(tg)
			return func(...)
		end
	else
		return function(...)
			local t = time_global()
			if t < tg then return end
			tg = t + tg_throttle
			return func(...)
		end
	end
end

GUI = nil -- instance, don't touch
function start(af_obj, msg)
	hide_hud_inventory()

	if (not GUI) then
		GUI = AfChooseUI(af_obj, msg)
	end

	if (GUI) and (not GUI:IsShown()) then
		GUI:ShowDialog(true)
		GUI:Reset(af_obj, msg)
	end
end

-------------------------------------------------------------------
class "AfChooseUI" (CUIScriptWnd)

function AfChooseUI:__init(af_obj, msg) super()
	self.af_update_funcs = {
		af_dragon_eye = throttle(function(self)
			if not self.af_dragon_eye_props then
				self.af_dragon_eye_props = {
					position = self.af_obj:position(),
					velocity = vector():set(0, 0, 0)
				}
				return
			end

			if not self.worldPos then return end

			local pos = self.af_dragon_eye_props.position
			local new_pos = self.af_obj:position()
			local velocity = vector():set(new_pos):sub(pos)

			self.af_dragon_eye_props.position = new_pos
			self.af_dragon_eye_props.velocity = velocity

			local mass = self.af_obj:mass()
			local result_dir = vector():set(self.worldPos):sub(new_pos):normalize()
			local force_vec = vector():set(
				result_dir.x * mass * 250,
				math.max(mass * velocity.y * 19.62 * 10, 0),
				result_dir.z * mass * 250
			)

			-- demonized_geometry_ray.VisualizeRay(
			-- 	self.af_obj:position(),
			-- 	self.af_obj:position():mad(vector():set(force_vec):normalize(), 5),
			-- 	nil,
			-- 	100
			-- )

			self.af_obj:get_physics_shell():apply_force(force_vec.x, force_vec.y, force_vec.z)
		end, 100)
	}

	self.af_action_funcs = {
		af_lighthouse = function(self)
			if perk_based_artefacts.artefact_props.af_lighthouse:manual_teleport(self.af_obj:section(), self.worldPos, self.obj) then
				alife_release(self.af_obj)
				self:Close()
			else
				self:Print(nil, game.translate_string("st_pba_teleport_cooldown"))
			end
		end,
		af_dragon_eye = function(self)
			perk_based_artefacts.artefact_props.af_dragon_eye:manual_explode(self.af_obj)
			self.af_dragon_eye_props = nil
			self:Close()
		end,
	}

	self.af_sub_action_funcs = {
		af_dragon_eye = throttle(function(self)
			local mass = self.af_obj:mass()
			local force_vec = vector():set(
				0,
				mass * 19.62 * 20,
				0
			)
			self.af_obj:get_physics_shell():apply_force(force_vec.x, force_vec.y, force_vec.z)
		end, 500),
	}

	self:Reset(af_obj, msg)
end

function AfChooseUI:__finalize()

end

function AfChooseUI:Reset(af_obj, msg)
	self.af_obj = af_obj
	self:Print(nil, game.translate_string(msg))
end

function AfChooseUI:Print(s, str, ...)
	actor_menu.set_msg(1, string.format(str, ...), 2)
end

function AfChooseUI:Close()
	self.af_obj = nil
	self.worldPos = nil
	self.obj = nil

	self:HideDialog()
	self:Show(false)
end

function AfChooseUI:TryAction()
	if not self.worldPos then return end

	if self.af_action_funcs[self.af_obj:section()] then
		self.af_action_funcs[self.af_obj:section()](self)
	else
		self:Print(nil, "No action defined for %s", self.af_obj:section())
	end
end

function AfChooseUI:TrySubAction()
	if not self.worldPos then return end

	if self.af_sub_action_funcs[self.af_obj:section()] then
		self.af_sub_action_funcs[self.af_obj:section()](self)
	end
end

function AfChooseUI:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (res == false) then
		local bind = dik_to_bind(dik)
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.MOUSE_1 then
				self:TryAction()
			elseif dik == DIK_keys.MOUSE_2 then
				self:TrySubAction()
			elseif dik == DIK_keys.DIK_ESCAPE then
				self:Close()
			end
		end
	end
	return res
end

local tg = 0
function AfChooseUI:Update()
	CUIScriptWnd.Update(self)

	if time_global() == tg then return end
	tg = time_global()

	local pos = GetCursorPosition()
	local worldPos, worldObjId = game.ui2world(pos)
	local obj = level.object_by_id(worldObjId)
	local vol = level.get_bounding_volume()
	
	if worldPos.x < vol.min.x then worldPos.x = vol.min.x + 2 end
	if worldPos.y < vol.min.y then worldPos.y = vol.min.y + 2 end
	if worldPos.z < vol.min.z then worldPos.z = vol.min.z + 2 end
	if worldPos.x > vol.max.x then worldPos.x = vol.max.x - 2 end
	if worldPos.y > vol.max.y then worldPos.y = vol.max.y - 2 end
	if worldPos.z > vol.max.z then worldPos.z = vol.max.z - 2 end

	self.worldPos = worldPos
	self.obj = obj and (IsStalker(obj) or IsMonster(obj)) and obj

	local p = particles_object("amik\\hit_fx\\metal\\hit_sparks_glow")
	p:play_at_pos(vector():set(self.worldPos):mad(vector():set(self.worldPos):sub(device().cam_pos):normalize(), -0.5))

	if self.af_update_funcs[self.af_obj:section()] then
		self.af_update_funcs[self.af_obj:section()](self)
	else
		-- self:Print(nil, "No update defined for %s", self.af_obj:section())
	end
end
